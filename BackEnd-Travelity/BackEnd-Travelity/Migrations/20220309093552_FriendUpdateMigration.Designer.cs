// <auto-generated />
using System;
using BackEnd_Travelity.Environment;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEnd_Travelity.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220309093552_FriendUpdateMigration")]
    partial class FriendUpdateMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AdminGroup", b =>
                {
                    b.Property<int>("AdminsId")
                        .HasColumnType("int");

                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.HasKey("AdminsId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("AdminGroup");
                });

            modelBuilder.Entity("AdminUser", b =>
                {
                    b.Property<int>("AdminsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("AdminsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AdminUser");
                });

            modelBuilder.Entity("AVBudgetBudget", b =>
                {
                    b.Property<int>("AVBudgetsId")
                        .HasColumnType("int");

                    b.Property<int>("BudgetsId")
                        .HasColumnType("int");

                    b.HasKey("AVBudgetsId", "BudgetsId");

                    b.HasIndex("BudgetsId");

                    b.ToTable("AVBudgetBudget");
                });

            modelBuilder.Entity("AVBudgetUser", b =>
                {
                    b.Property<int>("AVBudgetsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("AVBudgetsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AVBudgetUser");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Yes_no")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.AVBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Available")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("AVBudget");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BudgetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("BudgetNum")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Budget");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.BudgetReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TotalPaid")
                        .HasColumnType("int");

                    b.Property<int>("TotalReceived")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BudgetReport");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Messeage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AmountPaid")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Explorer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Explorer");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Friend_Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Friend");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FriendRequest");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BudgetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Group_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Likes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Follow")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Yes_No")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.MostVisited", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MostVisited");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Yes_no")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommentsFromUser")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Yes_No")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Reminder");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BudgetId")
                        .HasColumnType("int");

                    b.Property<int?>("BudgetReportId")
                        .HasColumnType("int");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FriendRequestId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("BudgetReportId");

                    b.HasIndex("CouponId");

                    b.HasIndex("FriendRequestId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BudgetBudgetReport", b =>
                {
                    b.Property<int>("BudgetReportsId")
                        .HasColumnType("int");

                    b.Property<int>("BudgetsId")
                        .HasColumnType("int");

                    b.HasKey("BudgetReportsId", "BudgetsId");

                    b.HasIndex("BudgetsId");

                    b.ToTable("BudgetBudgetReport");
                });

            modelBuilder.Entity("BudgetCoupon", b =>
                {
                    b.Property<int>("BudgetsId")
                        .HasColumnType("int");

                    b.Property<int>("CouponsId")
                        .HasColumnType("int");

                    b.HasKey("BudgetsId", "CouponsId");

                    b.HasIndex("CouponsId");

                    b.ToTable("BudgetCoupon");
                });

            modelBuilder.Entity("ChatGroup", b =>
                {
                    b.Property<int>("ChatsId")
                        .HasColumnType("int");

                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.HasKey("ChatsId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("ChatGroup");
                });

            modelBuilder.Entity("ChatUser", b =>
                {
                    b.Property<int>("ChatsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("ChatsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ChatUser");
                });

            modelBuilder.Entity("CommentPicture", b =>
                {
                    b.Property<int>("CommentsId")
                        .HasColumnType("int");

                    b.Property<int>("PicturesId")
                        .HasColumnType("int");

                    b.HasKey("CommentsId", "PicturesId");

                    b.HasIndex("PicturesId");

                    b.ToTable("CommentPicture");
                });

            modelBuilder.Entity("CommentUser", b =>
                {
                    b.Property<int>("CommentsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("CommentsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CommentUser");
                });

            modelBuilder.Entity("ExplorerMostVisited", b =>
                {
                    b.Property<int>("ExplorerId")
                        .HasColumnType("int");

                    b.Property<int>("MostVisitedId")
                        .HasColumnType("int");

                    b.HasKey("ExplorerId", "MostVisitedId");

                    b.HasIndex("MostVisitedId");

                    b.ToTable("ExplorerMostVisited");
                });

            modelBuilder.Entity("ExplorerPermission", b =>
                {
                    b.Property<int>("ExplorerId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.HasKey("ExplorerId", "PermissionsId");

                    b.HasIndex("PermissionsId");

                    b.ToTable("ExplorerPermission");
                });

            modelBuilder.Entity("ExplorerPlace", b =>
                {
                    b.Property<int>("ExplorersId")
                        .HasColumnType("int");

                    b.Property<int>("PlacesId")
                        .HasColumnType("int");

                    b.HasKey("ExplorersId", "PlacesId");

                    b.HasIndex("PlacesId");

                    b.ToTable("ExplorerPlace");
                });

            modelBuilder.Entity("FriendUser", b =>
                {
                    b.Property<int>("FriendsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("FriendsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("FriendUser");
                });

            modelBuilder.Entity("GroupPicture", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("PicturesId")
                        .HasColumnType("int");

                    b.HasKey("GroupsId", "PicturesId");

                    b.HasIndex("PicturesId");

                    b.ToTable("GroupPicture");
                });

            modelBuilder.Entity("GroupPlace", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("PlacesId")
                        .HasColumnType("int");

                    b.HasKey("GroupsId", "PlacesId");

                    b.HasIndex("PlacesId");

                    b.ToTable("GroupPlace");
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("LikesUser", b =>
                {
                    b.Property<int>("LikesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("LikesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("LikesUser");
                });

            modelBuilder.Entity("MostVisitedPermission", b =>
                {
                    b.Property<int>("MostVisitedId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.HasKey("MostVisitedId", "PermissionsId");

                    b.HasIndex("PermissionsId");

                    b.ToTable("MostVisitedPermission");
                });

            modelBuilder.Entity("MostVisitedPlace", b =>
                {
                    b.Property<int>("MostVisitedsId")
                        .HasColumnType("int");

                    b.Property<int>("PlacesId")
                        .HasColumnType("int");

                    b.HasKey("MostVisitedsId", "PlacesId");

                    b.HasIndex("PlacesId");

                    b.ToTable("MostVisitedPlace");
                });

            modelBuilder.Entity("PermissionPicture", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.HasKey("PermissionsId", "PictureId");

                    b.HasIndex("PictureId");

                    b.ToTable("PermissionPicture");
                });

            modelBuilder.Entity("PictureUser", b =>
                {
                    b.Property<int>("PicturesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("PicturesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PictureUser");
                });

            modelBuilder.Entity("ReminderUser", b =>
                {
                    b.Property<int>("RemindersId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RemindersId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ReminderUser");
                });

            modelBuilder.Entity("TicketUser", b =>
                {
                    b.Property<int>("TicketsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("TicketsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TicketUser");
                });

            modelBuilder.Entity("AdminGroup", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Admin", null)
                        .WithMany()
                        .HasForeignKey("AdminsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdminUser", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Admin", null)
                        .WithMany()
                        .HasForeignKey("AdminsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AVBudgetBudget", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.AVBudget", null)
                        .WithMany()
                        .HasForeignKey("AVBudgetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.Budget", null)
                        .WithMany()
                        .HasForeignKey("BudgetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AVBudgetUser", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.AVBudget", null)
                        .WithMany()
                        .HasForeignKey("AVBudgetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Group", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Budget", null)
                        .WithMany("Groups")
                        .HasForeignKey("BudgetId");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.User", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Budget", null)
                        .WithMany("Users")
                        .HasForeignKey("BudgetId");

                    b.HasOne("BackEnd_Travelity.Domain.BudgetReport", null)
                        .WithMany("Users")
                        .HasForeignKey("BudgetReportId");

                    b.HasOne("BackEnd_Travelity.Domain.Coupon", null)
                        .WithMany("Users")
                        .HasForeignKey("CouponId");

                    b.HasOne("BackEnd_Travelity.Domain.FriendRequest", null)
                        .WithMany("Users")
                        .HasForeignKey("FriendRequestId");
                });

            modelBuilder.Entity("BudgetBudgetReport", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.BudgetReport", null)
                        .WithMany()
                        .HasForeignKey("BudgetReportsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.Budget", null)
                        .WithMany()
                        .HasForeignKey("BudgetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BudgetCoupon", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Budget", null)
                        .WithMany()
                        .HasForeignKey("BudgetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.Coupon", null)
                        .WithMany()
                        .HasForeignKey("CouponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatGroup", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Chat", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatUser", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Chat", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommentPicture", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.Picture", null)
                        .WithMany()
                        .HasForeignKey("PicturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommentUser", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExplorerMostVisited", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Explorer", null)
                        .WithMany()
                        .HasForeignKey("ExplorerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.MostVisited", null)
                        .WithMany()
                        .HasForeignKey("MostVisitedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExplorerPermission", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Explorer", null)
                        .WithMany()
                        .HasForeignKey("ExplorerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExplorerPlace", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Explorer", null)
                        .WithMany()
                        .HasForeignKey("ExplorersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.Place", null)
                        .WithMany()
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FriendUser", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Friend", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupPicture", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.Picture", null)
                        .WithMany()
                        .HasForeignKey("PicturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupPlace", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.Place", null)
                        .WithMany()
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LikesUser", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Likes", null)
                        .WithMany()
                        .HasForeignKey("LikesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MostVisitedPermission", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.MostVisited", null)
                        .WithMany()
                        .HasForeignKey("MostVisitedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MostVisitedPlace", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.MostVisited", null)
                        .WithMany()
                        .HasForeignKey("MostVisitedsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.Place", null)
                        .WithMany()
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionPicture", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.Picture", null)
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PictureUser", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Picture", null)
                        .WithMany()
                        .HasForeignKey("PicturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReminderUser", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Reminder", null)
                        .WithMany()
                        .HasForeignKey("RemindersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketUser", b =>
                {
                    b.HasOne("BackEnd_Travelity.Domain.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd_Travelity.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Budget", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.BudgetReport", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.Coupon", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BackEnd_Travelity.Domain.FriendRequest", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
